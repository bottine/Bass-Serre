import category_theory.path_category
import category_theory.quotient
import category_theory.groupoid
import algebra.group.defs
import algebra.hom.group
import algebra.hom.equiv 
import data.set.lattice

/-
path_category == the free category of pats
quotient == quotienting morphisms by relations
algebra.hom.equiv to use ‚âÉ*
-/

open set

namespace category_theory
namespace groupoid

universes u v 

variables {C : Type u} 

instance group_at [groupoid C] (c : C): group (c ‚ü∂ c) :=
{ mul := Œª (x y : c ‚ü∂ c), x ‚â´ y
, mul_assoc := category.assoc --Œª (x y z : c ‚ü∂ c), by simp only [category.assoc]
, one := ùüô c
, one_mul := category.id_comp
, mul_one := category.comp_id
, inv := groupoid.inv
, mul_left_inv := groupoid.inv_comp }

def group_at_hom [groupoid C] {c d : C} (f : c ‚ü∂ d) : 
  (c ‚ü∂ c) ‚âÉ* (d ‚ü∂ d) := 
begin
  fsplit,
  exact Œª Œ≥, (groupoid.inv f) ‚â´ Œ≥ ‚â´ f,
  exact Œª Œ¥, f ‚â´ Œ¥ ‚â´ (groupoid.inv f),
  dsimp only [function.left_inverse], rintro x,
  simp only [category.assoc, groupoid.comp_inv, category.comp_id],
  rw [‚Üêcategory.assoc,groupoid.comp_inv,category.id_comp],
  dsimp only [function.right_inverse,function.left_inverse], rintro x,
  simp only [category.assoc, groupoid.comp_inv, 
             groupoid.inv_comp, category.comp_id],
  rw [‚Üêcategory.assoc,groupoid.inv_comp,category.id_comp],
  rintro x y,
  dsimp [has_mul.mul,mul_one_class.mul,monoid.mul,div_inv_monoid.mul,group.mul],
  have : x ‚â´ y = x ‚â´ f ‚â´ (groupoid.inv f) ‚â´ y, by 
  { congr, rw [‚Üêcategory.assoc,groupoid.comp_inv,category.id_comp], },
  rw this, 
  simp only [category.assoc],
end


def group_at_reachable [groupoid C] (c d : C)  (p : quiver.path c d) : (c ‚ü∂ c) ‚âÉ* (d ‚ü∂ d) :=
begin
  induction p,
  { reflexivity },
  { apply p_ih.trans,  apply groupoid.group_at_hom, assumption, }
end




section subgroupoid

variable (G : groupoid C)
/-
structure subgroupoid :=
  (verts : set C)
  (arrws : ‚àÄ {c : C} (hc : c ‚àà verts) {d : C} (hd : d ‚àà verts), set (G.hom c d))
  (inv' : ‚àÄ {c : C} (hc : c ‚àà verts) {d : C} (hd : d ‚àà verts) {p : G.hom c d} (hp : p ‚àà arrws hc hd), 
            groupoid.inv p ‚àà arrws hd hc)
  (mul' : ‚àÄ {c : C} (hc : c ‚àà verts) {d : C} (hd : d ‚àà verts) {e : C} (he : e ‚àà verts)
            {p} (hp : p ‚àà arrws hc hd) {q} (hq : q ‚àà arrws hd he), 
            p ‚â´ q ‚àà arrws hc he)

variable {G}

def is_subgroupoid (S T : subgroupoid G) : Prop :=
  ‚àÉ hv : S.verts ‚äÜ T.verts, ‚àÄ {c} (hc : c ‚àà S.verts) {d} (hd : d ‚àà S.verts),
    S.arrws hc hd ‚äÜ T.arrws (set.mem_of_mem_of_subset hc hv) (set.mem_of_mem_of_subset hd hv)

instance subgroupoid_le : has_le (subgroupoid G) := ‚ü®is_subgroupoid‚ü©

def top : subgroupoid G := ‚ü®set.univ, (Œª _ _ _ _, set.univ), by {rintros,trivial,}, by {rintros, trivial,}‚ü©
def bot : subgroupoid G := ‚ü®‚àÖ, (Œª _ _ _ _, ‚àÖ), by {rintros, simpa using hp,}, by {rintros, simpa using hp,}‚ü©

def le_top (S : subgroupoid G) : S ‚â§ top := 
begin
  dsimp only [top],
  fsplit; simp only [subset_univ, implies_true_iff],
end

def bot_le (S : subgroupoid G) : bot ‚â§ S :=
begin
  dsimp only [bot],
  fsplit; simp only [empty_subset, implies_true_iff],
end

def inter (S T : subgroupoid G) : subgroupoid G := 
begin
  refine_struct ‚ü®S.verts ‚à© T.verts, Œª c hc d hd, (S.arrws hc.1 hd.1)‚à©(T.arrws hc.2 hd.2),_,_‚ü©,
  { rintro c ‚ü®cS,cT‚ü© d ‚ü®dS,dT‚ü© p ‚ü®pS,pT‚ü©, exact ‚ü®S.inv' cS dS pS, T.inv' cT dT pT‚ü© },
  { rintro c ‚ü®cS,cT‚ü© d ‚ü®dS,dT‚ü© e ‚ü®eS,eT‚ü© p ‚ü®pS,pT‚ü© q ‚ü®qS,qT‚ü©, exact ‚ü®S.mul' cS dS eS pS qS, T.mul' cT dT eT pT qT‚ü©,}
end

lemma le_inter {R S T : subgroupoid G} : R ‚â§ S ‚Üí R ‚â§ T ‚Üí R ‚â§ inter S T :=
begin
  rintros ‚ü®rsv,rsg‚ü© ‚ü®rtv,rtg‚ü©, fsplit,
  use Œª c cr, ‚ü®rsv cr,rtv cr‚ü©,
  rintro c cr d dr,
  rintro a ar, split, apply rsg, exact ar, apply rtg, exact ar,
end

def Inter (S : set (subgroupoid G)) : subgroupoid G := 
begin
  use set.Inter (Œª s : S, s.val.verts),
  { rintro c hc d hd, 
    exact set.Inter (Œª (s : S), s.val.arrws (by {apply hc, use s,} : c ‚àà s.val.verts) (by {apply hd, use s,} : d ‚àà s.val.verts)),},
  { rintro c hc d hd p hp, simp, rintro s sS, apply s.inv', apply hp, use s, use sS},
  { rintro c hc d hd e he p hp q hq, simp, rintro s sS, apply s.mul', apply hp, use s, use sS, apply hq, use s,},
end


instance : has_inf (subgroupoid G) := ‚ü®inter‚ü©

instance : complete_lattice (subgroupoid G) := sorry


-- Following Higgins
def generated (X : ‚àÄ c d : C, set (G.hom c d)) : subgroupoid G := ‚ãÇ‚ÇÄ { S : subgroupoid G | ‚àÄ c d} 

-/

@[ext]
structure subgroupoid :=
  (arrws : ‚àÄ (c d : C), set (G.hom c d))
  (inv' : ‚àÄ {c d} {p : G.hom c d} (hp : p ‚àà arrws c d), 
            groupoid.inv p ‚àà arrws d c)
  (mul' : ‚àÄ {c d e} {p} (hp : p ‚àà arrws c d) {q} (hq : q ‚àà arrws d e), 
            p ‚â´ q ‚àà arrws c e)


variable {G}

def subgroupoid.carrier (S :subgroupoid G) : set C := {c : C | (S.arrws c c).nonempty }

def is_subgroupoid (S T : subgroupoid G) : Prop :=
  ‚àÄ {c d}, S.arrws c d ‚äÜ T.arrws c d

instance subgroupoid_le : has_le (subgroupoid G) := ‚ü®is_subgroupoid‚ü©

def le_refl (S : subgroupoid G) : S ‚â§ S :=
by {rintro c d p, exact id,}

def le_trans (R S T : subgroupoid G) : R ‚â§ S ‚Üí S ‚â§ T ‚Üí R ‚â§ T :=
by {rintro RS ST c d, exact (@RS c d).trans (@ST c d), } 

def le_antisymm (R S : subgroupoid G) : R ‚â§ S ‚Üí S ‚â§ R ‚Üí R = S :=
by {rintro RS SR, ext c d p, exact ‚ü®(@RS c d p), (@SR c d p)‚ü©,}


instance : partial_order (subgroupoid G) := 
{ le := is_subgroupoid,
  le_refl := le_refl,
  le_trans := le_trans,
  le_antisymm := le_antisymm}

instance : has_top (subgroupoid G) := ‚ü®‚ü®(Œª _ _, set.univ), by {rintros,trivial,}, by {rintros, trivial,}‚ü©‚ü©
instance : has_bot (subgroupoid G) := ‚ü®‚ü®(Œª _ _, ‚àÖ), by {rintros, simpa using hp,}, by {rintros, simpa using hp,}‚ü©‚ü©

def le_top (S : subgroupoid G) : S ‚â§ ‚ä§  := 
begin
  dsimp only [has_top.top], 
  rintros c d,
  simp only [subset_univ], 
end

def bot_le (S : subgroupoid G) : ‚ä•   ‚â§ S :=
begin
  dsimp only [has_bot.bot],
  rintros c d,
  simp only [empty_subset, implies_true_iff],
end


instance : has_inf (subgroupoid G) := 
‚ü® Œª S T, 
  ‚ü®(Œª c d, (S.arrws c d)‚à©(T.arrws c d))
  , by {rintros, exact ‚ü®S.inv' hp.1,T.inv' hp.2‚ü©}
  , by {rintros, exact ‚ü®S.mul' hp.1 hq.1, T.mul' hp.2 hq.2‚ü©}‚ü©‚ü©


lemma le_inf {R S T : subgroupoid G} : R ‚â§ S ‚Üí R ‚â§ T ‚Üí R ‚â§ S ‚äì T :=
begin
  rintros RS RT,
  rintros c d p pR, exact ‚ü®RS pR, RT pR‚ü©,
end

instance : has_Inf (subgroupoid G) :=
‚ü® Œª s,
  ‚ü®(Œª c d, set.Inter (Œª (S : s), S.val.arrws c d))
  , by {rintros, rw set.mem_Inter, rintro S, apply S.val.inv', apply hp, simp, use [S.val, S.prop], refl,}
  , by {rintros, rw set.mem_Inter, rintro S, apply S.val.mul', apply hp, use [S.val,S.prop], apply hq, use [S.val,S.prop],}‚ü©‚ü©




instance : complete_lattice (subgroupoid G) :=
{ bot          := (‚ä•),
  bot_le       := sorry,
  top          := (‚ä§),
  le_top       := sorry,
  inf          := (‚äì),
  le_inf       := sorry,
  inf_le_left  := sorry,
  inf_le_right := sorry,
  .. complete_lattice_of_Inf (subgroupoid G) sorry }

-- Following Higgins, more or less
def generated (X : ‚àÄ c d : C, set (G.hom c d)) : subgroupoid G := Inf { S : subgroupoid G | ‚àÄ (c d : C), X c d ‚äÜ S.arrws c d }

inductive word  (X : ‚àÄ c d : C, set (G.hom c d)) : C ‚Üí C ‚Üí Sort*
| nil {c : C} : word c c
| cons_p {c d e : C} (p : X c d) (w : word d e) : word c e
| cons_n {c d e : C} (p : X d c) (w : word d e) : word c e

def word.val {X : ‚àÄ c d : C, set (G.hom c d)} : Œ† {c d : C}, word X c d ‚Üí G.hom c d
| c .(c) (word.nil ) := (ùüô c)
| _ _ (word.cons_p p w) := p.val ‚â´ w.val  
| _ _ (word.cons_n p w) := (G.inv p.val) ‚â´ w.val

def word.letter {X : ‚àÄ c d : C, set (G.hom c d)} {c d : C} (p : X c d) : word X c d := (word.cons_p p word.nil)

@[pattern]
def word.letter_p {X : ‚àÄ c d : C, set (G.hom c d)} {c d : C} (p : X c d) : word X c d := word.letter p
@[pattern]
def word.letter_n {X : ‚àÄ c d : C, set (G.hom c d)} {c d : C} (p : X c d) : word X d c := (word.cons_n p word.nil)

def word.append  {X : ‚àÄ c d : C, set (G.hom c d)} : Œ† {c d e : C}, word X c d ‚Üí word X d e ‚Üí word X c e
| _ _ _ (word.nil) w := w
| _ _ _ (word.cons_p p u) w := word.cons_p p (u.append w)
| _ _ _ (word.cons_n p u) w := word.cons_n p (u.append w)

def word.reverse {X : ‚àÄ c d : C, set (G.hom c d)} : Œ† {c d : C}, word X c d ‚Üí word X d c
| _ _ (word.nil) := word.nil
| _ _ (word.cons_p p u) := (u.reverse.append (word.letter_n p))
| _ _ (word.cons_n p u) := (u.reverse.append (word.letter_p p))

def word.nonempty  {X : ‚àÄ c d : C, set (G.hom c d)} : Œ† {c d : C}, word X c d ‚Üí Prop
| _ _ (word.nil) := false
| _ _ _ := true

lemma word.nonempty_reverse  {X : ‚àÄ c d : C, set (G.hom c d)} {c d : C} (p : word X c d) : p.nonempty ‚Üí p.reverse.nonempty := sorry
lemma word.nonempty_append  {X : ‚àÄ c d : C, set (G.hom c d)} {c d e : C} (p : word X c d) (q : word X d e) :
  p.nonempty ‚à® q.nonempty ‚Üí (p.append q).nonempty := sorry

lemma word.letter_p_val {X : ‚àÄ c d : C, set (G.hom c d)} {c d : C} (p : X c d) : (word.letter_p p).val = p.val := 
begin
  dsimp [word.letter_p,word.letter,word.val],
  simp only [category.comp_id],
end

lemma word.letter_n_val {X : ‚àÄ c d : C, set (G.hom c d)} {c d : C} (p : X c d) : (word.letter_n p).val = G.inv p.val := 
begin
  dsimp [word.letter_n,word.val],
  simp only [category.comp_id],
end

lemma word.nonempty_letter_p {X : ‚àÄ c d : C, set (G.hom c d)} {c d : C} (p : X c d) : (word.letter_p p).nonempty := trivial
lemma word.nonempty_letter_n {X : ‚àÄ c d : C, set (G.hom c d)} {c d : C} (p : X c d) : (word.letter_n p).nonempty := trivial

lemma word.append_val (X : ‚àÄ c d : C, set (G.hom c d)) {c d e : C} (u : word X c d) (w : word X d e) : 
  (u.append w).val = u.val ‚â´ w.val := sorry

lemma word.reverse_val (X : ‚àÄ c d : C, set (G.hom c d)) {c d : C} (u : word X c d) : 
  (u.reverse).val = G.inv u.val := sorry


def generated' (X : ‚àÄ c d : C, set (G.hom c d)) : subgroupoid G :=  
begin
  fsplit,
  {rintros c d, apply set.image (Œª (p : word X c d), p.val ) {p : word X c d | p.nonempty},},
  {rintros c d _ ‚ü®u,un,rfl‚ü©, simp, use u.reverse, split, apply word.nonempty_reverse, apply un, apply word.reverse_val, },
  {rintros c d e _ ‚ü®u,un,rfl‚ü© _ ‚ü®w,wn,rfl‚ü©, simp, use u.append w, split, apply word.nonempty_append, use or.inl un, apply word.append_val, },
end

lemma generated'_contains (X : ‚àÄ c d : C, set (G.hom c d)) : ‚àÄ (c d : C), X c d ‚äÜ (generated' X).arrws c d :=
begin
  rintros c d p pX,
  dsimp only [generated'],
  simp only [mem_image],
  let w : word X c d := word.letter_p ‚ü®p,pX‚ü©,
  use w, split, simp, exact word.letter_p_val ‚ü®p,pX‚ü©,
end

lemma contains_generated'  (X : ‚àÄ c d : C, set (G.hom c d)) (S : subgroupoid G) (hS : ‚àÄ (c d : C), X c d ‚äÜ S.arrws c d) :
  Œ† {c d : C} (p : word X c d) (pn : p.nonempty), p.val ‚àà S.arrws c d
--| _ _ (word.nil) _ := by {}
| _ _ (word.letter_p p) _ := by {rw word.letter_p_val,apply hS, exact p.prop,}
| _ _ (word.letter_n p) _ := by {rw word.letter_n_val,apply S.inv',apply hS, exact p.prop,}
| _ _ (word.cons_p p (word.cons_p q u)) _ := by 
{ apply S.mul',
  { apply hS, exact p.prop, },
  { apply contains_generated', trivial,} }
| _ _ (word.cons_p p (word.cons_n q u)) _ := by
{ apply S.mul',
  { apply hS, exact p.prop, },
  { apply contains_generated', trivial,} }
| _ _ (word.cons_n p (word.cons_p q u)) _ := by
{ apply S.mul',
  { apply S.inv', apply hS, exact p.prop, },
  { apply contains_generated', trivial,} }
| _ _ (word.cons_n p (word.cons_n q u)) _ := by 
{ apply S.mul',
  { apply S.inv', apply hS, exact p.prop, },
  { apply contains_generated', trivial,} }

lemma generated_eq' (X : ‚àÄ c d : C, set (G.hom c d)) : generated X = generated' X := 
begin
  apply le_antisymm,
  { have : ‚àÄ (c d : C), X c d ‚äÜ (generated' X).arrws c d := generated'_contains X,
    exact @Inf_le _ _ { S : subgroupoid G | ‚àÄ (c d : C), X c d ‚äÜ S.arrws c d } (generated' X) this,},
  { have : ‚àÄ S : subgroupoid G, S ‚àà { S : subgroupoid G | ‚àÄ (c d : C), X c d ‚äÜ S.arrws c d} ‚Üí (generated' X ) ‚â§ S, by
    { rintro S hS, rintro c d _ ‚ü®w,h,rfl‚ü©, simp only, apply contains_generated' X S hS w h,},
    apply @le_Inf _ _ { S : subgroupoid G | ‚àÄ (c d : C), X c d ‚äÜ S.arrws c d } (generated' X) this, }
end


end subgroupoid


end groupoid
end category_theory