import category_theory.path_category
import category_theory.quotient
import category_theory.groupoid
import algebra.group.defs
import algebra.hom.group
import algebra.hom.equiv 
import data.set.lattice
import combinatorics.quiver.connected_component
import group_theory.subgroup.basic

/-
path_category == the free category of pats
quotient == quotienting morphisms by relations
algebra.hom.equiv to use ‚âÉ*
-/

open set

namespace category_theory

universes u v 

variables {C : Type u} 

instance groupoid.vertex_group [groupoid C] (c : C): group (c ‚ü∂ c) :=
{ mul := Œª (x y : c ‚ü∂ c), x ‚â´ y
, mul_assoc := category.assoc --Œª (x y z : c ‚ü∂ c), by simp only [category.assoc]
, one := ùüô c
, one_mul := category.id_comp
, mul_one := category.comp_id
, inv := groupoid.inv
, mul_left_inv := groupoid.inv_comp }

@[simp] lemma groupoid.vertex_group.mul_eq_comp [groupoid C] (c : C) (Œ≥ Œ¥ : c ‚ü∂ c) : Œ≥ * Œ¥ = Œ≥ ‚â´ Œ¥ := rfl
@[simp] lemma groupoid.vertex_group.inv_eq_inv [G : groupoid C] (c : C) (Œ≥ : c ‚ü∂ c) : Œ≥ ‚Åª¬π = G.inv Œ≥ := rfl



def groupoid.vertex_group_isom_of_map [groupoid C] {c d : C} (f : c ‚ü∂ d) : 
  (c ‚ü∂ c) ‚âÉ* (d ‚ü∂ d) := 
begin
  refine_struct ‚ü®Œª Œ≥, (groupoid.inv f) ‚â´ Œ≥ ‚â´ f, Œª Œ¥, f ‚â´ Œ¥ ‚â´ (groupoid.inv f), _, _, _‚ü©,
  { rintro x,
    simp_rw [category.assoc, groupoid.comp_inv, category.comp_id,‚Üêcategory.assoc, groupoid.comp_inv, category.id_comp], },
  { rintro x,
    simp_rw [category.assoc, groupoid.inv_comp, ‚Üêcategory.assoc, groupoid.inv_comp,category.id_comp, category.comp_id], },
  { rintro x y,
    have : x ‚â´ y = x ‚â´ f ‚â´ (groupoid.inv f) ‚â´ y, by 
    { congr, rw [‚Üêcategory.assoc,groupoid.comp_inv,category.id_comp], },
    simp [this,groupoid.vertex_group.mul_eq_comp,category.assoc], },
end


def groupoid.vertex_group_isom_of_path [groupoid C] (c d : C)  (p : quiver.path c d) : (c ‚ü∂ c) ‚âÉ* (d ‚ü∂ d) :=
begin
  induction p,
  { reflexivity },
  { apply p_ih.trans,  apply groupoid.vertex_group_isom_of_map, assumption, }
end


@[simp]
lemma groupoid.inv_inv [G : groupoid C] (c d : C) [p : c ‚ü∂ d] : G.inv (G.inv p) = p := 
  calc G.inv (G.inv p) = (G.inv (G.inv p)) ‚â´ (ùüô d) : by rw category.comp_id
                  ... = (G.inv (G.inv p)) ‚â´ (G.inv p ‚â´ p) : by rw ‚Üêgroupoid.inv_comp
                  ... = (G.inv (G.inv p) ‚â´ G.inv p) ‚â´ p : by rw ‚Üêcategory.assoc
                  ... = (ùüô c) ‚â´ p : by rw groupoid.inv_comp
                  ... = p : by rw category.id_comp 


section
open quiver
instance [G : groupoid C] : has_reverse C := ‚ü®Œª a b, G.inv‚ü©
end

namespace groupoid

section subgroupoid

variable (G : groupoid C)

@[ext]
structure subgroupoid :=
  (arrws : ‚àÄ (c d : C), set (G.hom c d))
  (inv' : ‚àÄ {c d} {p : G.hom c d} (hp : p ‚àà arrws c d), 
            groupoid.inv p ‚àà arrws d c)
  (mul' : ‚àÄ {c d e} {p} (hp : p ‚àà arrws c d) {q} (hq : q ‚àà arrws d e), 
            p ‚â´ q ‚àà arrws c e)

--instance: has_coe_to_fun (subgroupoid G) (Œª S, Œ† (c d : C), set (G.hom c d)) := ‚ü®Œª S, S.arrws‚ü©

variable {G}

lemma subgroupoid.nonempty_isotropy_to_mem_id (S :subgroupoid G) (c : C) : 
  (S.arrws c c).nonempty ‚Üí ùüô c ‚àà S.arrws c c :=
begin
  rintro ‚ü®Œ≥,hŒ≥‚ü©,
  have : ùüô c = Œ≥ * (G.inv Œ≥), by simp only [vertex_group.mul_eq_comp, comp_inv],
  rw this, apply S.mul', exact hŒ≥, apply S.inv', exact hŒ≥,
end

def subgroupoid.carrier (S :subgroupoid G) : set C := {c : C | (S.arrws c c).nonempty }

def subgroupoid.as_wide_quiver  (S : subgroupoid G) : quiver C := ‚ü®Œª c d, subtype $ S.arrws c d‚ü©


def subgroupoid.coe  (S : subgroupoid G) : groupoid (S.carrier) :=
{ to_category :=
  { to_category_struct := 
    { to_quiver := 
      { hom := Œª a b, S.arrws a.val b.val }
    , id := Œª a, ‚ü®ùüô a.val, by {apply subgroupoid.nonempty_isotropy_to_mem_id, use a.prop,}‚ü©
    , comp := Œª a b c p q, ‚ü®p.val ‚â´ q.val, S.mul' p.prop q.prop‚ü©, }
  , id_comp' := Œª a b ‚ü®p,hp‚ü©, by simp only [category.id_comp]
  , comp_id' := Œª a b ‚ü®p,hp‚ü©, by simp only [category.comp_id]
  , assoc' := Œª a b c d ‚ü®p,hp‚ü© ‚ü®q,hq‚ü© ‚ü®r,hr‚ü©, by simp only [category.assoc] }
, inv := Œª a b p, ‚ü®G.inv p.val, S.inv' p.prop‚ü©
, inv_comp' := Œª a b ‚ü®p,hp‚ü©, by simp only [inv_comp]
, comp_inv' := Œª a b ‚ü®p,hp‚ü©, by simp only [comp_inv] }

def subgroupoid.vertex_subgroup (S : subgroupoid G) (c : C) (hc : c ‚àà S.carrier) : subgroup (c ‚ü∂ c) :=
‚ü® S.arrws c c 
, Œª f g hf hg, S.mul' hf hg
, by {apply subgroupoid.nonempty_isotropy_to_mem_id, use hc,}
, Œª f hf, S.inv' hf‚ü©


def is_subgroupoid (S T : subgroupoid G) : Prop :=
  ‚àÄ {c d}, S.arrws c d ‚äÜ T.arrws c d

instance subgroupoid_le : has_le (subgroupoid G) := ‚ü®is_subgroupoid‚ü©

def le_refl (S : subgroupoid G) : S ‚â§ S :=
by {rintro c d p, exact id,}

def le_trans (R S T : subgroupoid G) : R ‚â§ S ‚Üí S ‚â§ T ‚Üí R ‚â§ T :=
by {rintro RS ST c d, exact (@RS c d).trans (@ST c d), } 

def le_antisymm (R S : subgroupoid G) : R ‚â§ S ‚Üí S ‚â§ R ‚Üí R = S :=
by {rintro RS SR, ext c d p, exact ‚ü®(@RS c d p), (@SR c d p)‚ü©,}


instance : partial_order (subgroupoid G) := 
{ le := is_subgroupoid,
  le_refl := le_refl,
  le_trans := le_trans,
  le_antisymm := le_antisymm}

instance : has_top (subgroupoid G) := ‚ü®‚ü®(Œª _ _, set.univ), by {rintros,trivial,}, by {rintros, trivial,}‚ü©‚ü©
instance : has_bot (subgroupoid G) := ‚ü®‚ü®(Œª _ _, ‚àÖ), by {rintros, simpa using hp,}, by {rintros, simpa using hp,}‚ü©‚ü©

instance : has_inf (subgroupoid G) := 
‚ü® Œª S T, 
  ‚ü®(Œª c d, (S.arrws c d)‚à©(T.arrws c d))
  , by {rintros, exact ‚ü®S.inv' hp.1,T.inv' hp.2‚ü©}
  , by {rintros, exact ‚ü®S.mul' hp.1 hq.1, T.mul' hp.2 hq.2‚ü©}‚ü©‚ü©

instance : has_Inf (subgroupoid G) :=
‚ü® Œª s,
  ‚ü®(Œª c d, set.Inter (Œª (S : s), S.val.arrws c d))
  , by {rintros, rw set.mem_Inter, rintro S, apply S.val.inv', apply hp, simp, use [S.val, S.prop], refl,}
  , by {rintros, rw set.mem_Inter, rintro S, apply S.val.mul', apply hp, use [S.val,S.prop], apply hq, use [S.val,S.prop],}‚ü©‚ü©

instance : complete_lattice (subgroupoid G) :=
{ bot          := (‚ä•),
  bot_le       := Œª S c d, by {apply empty_subset,},
  top          := (‚ä§),
  le_top       := Œª S c d, by {apply subset_univ,},
  inf          := (‚äì),
  le_inf       := Œª R S T RS RT c d p pR, ‚ü®RS pR, RT pR‚ü©,
  inf_le_left  := Œª R S c d p pRS, pRS.left,
  inf_le_right := Œª R S c d p pRS, pRS.right,
  .. complete_lattice_of_Inf (subgroupoid G) 
       ( by 
        { dsimp only [Inf], rintro s, constructor, 
          { rintro S Ss c d p hp, 
            simp only [Inter_coe_set, mem_Inter] at hp, 
            exact hp S Ss, },
          { rintro T Tl c d p pT, 
            simp only [Inter_coe_set, mem_Inter],
            rintros S Ss, apply Tl, exact Ss, exact pT,}}) }

def discrete [decidable_eq C] : subgroupoid G := 
‚ü® Œª c d, if h : c = d then {h.rec_on (G.id c)} else ‚àÖ
, by 
  { rintros c d p hp, 
    by_cases h : d = c, 
    { subst_vars, 
      simp only [eq_self_iff_true, congr_arg_mpr_hom_right, eq_to_hom_refl, category.comp_id, dite_eq_ite, if_true, mem_singleton_iff] at hp ‚ä¢, 
      rw hp, apply inv_one, },
    { rw dif_neg (Œª l : c = d, h l.symm) at hp, exact hp.elim, }, }
, by 
  { rintros c d e p hp q hq,
    by_cases h : d = c,
    { by_cases k : e = d; subst_vars,
      { simp only [eq_self_iff_true, dite_eq_ite, if_true, mem_singleton_iff] at ‚ä¢ hp hq,
        rw [hp, hq], simp only [category.comp_id], }, 
      { simp only [eq_self_iff_true, dite_eq_ite, if_true, mem_singleton_iff] at ‚ä¢ hp hq,
        rw dif_neg (Œª l : d = e, k l.symm) at hq, exact hq.elim, }, },
    { rw dif_neg (Œª l : c = d, h l.symm) at hp, exact hp.elim, }
  }‚ü©

structure is_normal (S : subgroupoid G) : Prop :=
  (wide : ‚àÄ c, (ùüô c) ‚àà (S.arrws c c))  -- S is "wide": all vertices of G are covered
  (conj_mem : ‚àÄ {c d} (p : c ‚ü∂ d) (Œ≥ : c ‚ü∂ c) (hs : Œ≥ ‚àà S.arrws c c), ((G.inv p) ‚â´ Œ≥ ‚â´ p) ‚àà (S.arrws d d))

def is_normal.conjugation_eq (S : subgroupoid G) (Sn : is_normal S) {c d} (p : c ‚ü∂ d) : 
  set.bij_on (Œª Œ≥ : c ‚ü∂ c, (G.inv p) ‚â´ Œ≥ ‚â´ p) (S.arrws c c) (S.arrws d d) := 
begin
  split,
  { rintro Œ≥ Œ≥S, apply Sn.conj_mem, exact Œ≥S },
  split,
  { rintro Œ≥‚ÇÅ Œ≥‚ÇÅS Œ≥‚ÇÇ Œ≥‚ÇÇS h, 
    simp only at h,
    let h' := p ‚â´=(h =‚â´ (G.inv p)),--category_theory.eq_whisker h (G.inv p),
    simp only [category.assoc, comp_inv, category.comp_id] at h',
    simp only [‚Üêcategory.assoc, comp_inv, category.id_comp] at h', exact h', }, -- what's the quickest way here?
  { rintro Œ¥ Œ¥S, use (p ‚â´ Œ¥ ‚â´ (G.inv p)), split, 
    { have : p = G.inv (G.inv p), by {simp only [inv_inv],},
      nth_rewrite 0 this,
      apply Sn.conj_mem, exact Œ¥S, },
    { simp only [category.assoc, inv_comp, category.comp_id], 
      simp only [‚Üêcategory.assoc, inv_comp, category.id_comp], }}
end

lemma top_is_normal : is_normal (‚ä§ : subgroupoid G) := 
begin
  split,
  { rintro c, trivial },
  { rintro c d p Œ≥ hŒ≥, trivial,}
end

lemma Inf_is_normal (s : set $ subgroupoid G) (sn : ‚àÄ S ‚àà s, is_normal S) : is_normal (Inf s) := 
begin
  split,
  { rintro c, dsimp only [Inf], rintro _ ‚ü®‚ü®S,Ss‚ü©,rfl‚ü©, exact (sn S Ss).wide c,},
  { rintros c d p Œ≥ hŒ≥, dsimp only [Inf], rintro _ ‚ü®‚ü®S,Ss‚ü©,rfl‚ü©, apply (sn S Ss).conj_mem p Œ≥, apply hŒ≥, use ‚ü®S,Ss‚ü©,}
end 

lemma is_normal_vertex_subgroup (S : subgroupoid G) (Sn : is_normal S) (c : C) (cS : c ‚àà S.carrier) : (S.vertex_subgroup c cS).normal :=
begin
  constructor,
  rintros x hx y, 
  simp only [vertex_group.mul_eq_comp, vertex_group.inv_eq_inv, category.assoc],
  have : y = G.inv (G.inv y), by {simp only [inv_inv],},
  nth_rewrite 0 this,
  apply Sn.conj_mem, exact hx,
end

/- Following Higgins -/
structure is_strict_normal (S : subgroupoid G) extends is_normal S : Prop := 
(discrete : ‚àÄ (c d : C), c ‚â† d ‚Üí  (S.arrws c d) = ‚àÖ)

variable (X : ‚àÄ c d : C, set (G.hom c d))



-- Following Higgins, more or less
def generated : subgroupoid G := Inf { S : subgroupoid G | ‚àÄ (c d : C), X c d ‚äÜ S.arrws c d }


def set_as_quiver (X : ‚àÄ c d : C, set (G.hom c d)) : quiver C := ‚ü®Œª (c d : C), subtype $ X c d‚ü©

-- better this way?
def word'  (X : ‚àÄ c d : C, set (G.hom c d)) : C ‚Üí C ‚Üí Sort* := 
@quiver.path _ (@quiver.symmetrify_quiver C (set_as_quiver X))

def word'.val (X : ‚àÄ c d : C, set (G.hom c d)) {c d : C} (w : word' X c d) : c ‚ü∂ d :=
begin
  induction w with a b u y z,
  { exact ùüô c, },
  { cases y, 
    { exact z ‚â´ y.val,},
    { exact z ‚â´ (G.inv y.val), }, },
end

inductive word  (X : ‚àÄ c d : C, set (G.hom c d)) : C ‚Üí C ‚Üí Sort*
| nil {c : C} : word c c
| cons_p {c d e : C} (p : X c d) (w : word d e) : word c e
| cons_n {c d e : C} (p : X d c) (w : word d e) : word c e

variable {X}

def word.val  : Œ† {c d : C}, word X c d ‚Üí G.hom c d
| c .(c) (word.nil ) := (ùüô c)
| _ _ (word.cons_p p w) := p.val ‚â´ w.val  
| _ _ (word.cons_n p w) := (G.inv p.val) ‚â´ w.val

def word.letter {c d : C} (p : X c d) : word X c d := (word.cons_p p word.nil)

@[pattern]
def word.letter_p {c d : C} (p : X c d) : word X c d := word.letter p
@[pattern]
def word.letter_n {c d : C} (p : X c d) : word X d c := (word.cons_n p word.nil)

def word.append  : Œ† {c d e : C}, word X c d ‚Üí word X d e ‚Üí word X c e
| _ _ _ (word.nil) w := w
| _ _ _ (word.cons_p p u) w := word.cons_p p (u.append w)
| _ _ _ (word.cons_n p u) w := word.cons_n p (u.append w)

def word.reverse : Œ† {c d : C}, word X c d ‚Üí word X d c
| _ _ (word.nil) := word.nil
| _ _ (word.cons_p p u) := (u.reverse.append (word.letter_n p))
| _ _ (word.cons_n p u) := (u.reverse.append (word.letter_p p))

def word.nonempty  : Œ† {c d : C}, word X c d ‚Üí Prop
| _ _ (word.nil) := false
| _ _ _ := true

lemma word.nonempty_reverse  {c d : C} (p : word X c d) : p.nonempty ‚Üí p.reverse.nonempty := sorry
lemma word.nonempty_append  {c d e : C} (p : word X c d) (q : word X d e) :
  p.nonempty ‚à® q.nonempty ‚Üí (p.append q).nonempty := sorry

lemma word.letter_p_val {c d : C} (p : X c d) : (word.letter_p p).val = p.val := 
begin
  dsimp [word.letter_p,word.letter,word.val],
  simp only [category.comp_id],
end

lemma word.letter_n_val {c d : C} (p : X c d) : (word.letter_n p).val = G.inv p.val := 
begin
  dsimp [word.letter_n,word.val],
  simp only [category.comp_id],
end

lemma word.nonempty_letter_p {c d : C} (p : X c d) : (word.letter_p p).nonempty := trivial
lemma word.nonempty_letter_n {c d : C} (p : X c d) : (word.letter_n p).nonempty := trivial

lemma word.append_val {c d e : C} (u : word X c d) (w : word X d e) : 
  (u.append w).val = u.val ‚â´ w.val := sorry

lemma word.reverse_val {c d : C} (u : word X c d) : 
  (u.reverse).val = G.inv u.val := sorry

variable (X)
include X
def generated' : subgroupoid G :=  
begin
  fsplit,
  {rintros c d, apply set.image (Œª (p : word X c d), p.val ) {p : word X c d | p.nonempty},},
  {rintros c d _ ‚ü®u,un,rfl‚ü©, simp, use u.reverse, split, apply word.nonempty_reverse, apply un, apply word.reverse_val, },
  {rintros c d e _ ‚ü®u,un,rfl‚ü© _ ‚ü®w,wn,rfl‚ü©, simp, use u.append w, split, apply word.nonempty_append, use or.inl un, apply word.append_val, },
end

lemma generated'_contains : ‚àÄ (c d : C), X c d ‚äÜ (generated' X).arrws c d :=
begin
  rintros c d p pX,
  dsimp only [generated'],
  simp only [mem_image],
  let w : word X c d := word.letter_p ‚ü®p,pX‚ü©,
  use w, split, simp, exact word.letter_p_val ‚ü®p,pX‚ü©,
end

lemma contains_generated'  (S : subgroupoid G) (hS : ‚àÄ (c d : C), X c d ‚äÜ S.arrws c d) :
  Œ† {c d : C} (p : word X c d) (pn : p.nonempty), p.val ‚àà S.arrws c d
| _ _ (word.letter_p p) _ := by {rw word.letter_p_val,apply hS, exact p.prop,}
| _ _ (word.letter_n p) _ := by {rw word.letter_n_val,apply S.inv',apply hS, exact p.prop,}
| _ _ (word.cons_p p (word.cons_p q u)) _ := by 
{ apply S.mul',
  { apply hS, exact p.prop, },
  { apply contains_generated', trivial,} }
| _ _ (word.cons_p p (word.cons_n q u)) _ := by
{ apply S.mul',
  { apply hS, exact p.prop, },
  { apply contains_generated', trivial,} }
| _ _ (word.cons_n p (word.cons_p q u)) _ := by
{ apply S.mul',
  { apply S.inv', apply hS, exact p.prop, },
  { apply contains_generated', trivial,} }
| _ _ (word.cons_n p (word.cons_n q u)) _ := by 
{ apply S.mul',
  { apply S.inv', apply hS, exact p.prop, },
  { apply contains_generated', trivial,} }

lemma generated_eq' : generated X = generated' X := 
begin
  apply le_antisymm,
  { have : ‚àÄ (c d : C), X c d ‚äÜ (generated' X).arrws c d := generated'_contains X,
    exact @Inf_le _ _ { S : subgroupoid G | ‚àÄ (c d : C), X c d ‚äÜ S.arrws c d } (generated' X) this,},
  { have : ‚àÄ S : subgroupoid G, S ‚àà { S : subgroupoid G | ‚àÄ (c d : C), X c d ‚äÜ S.arrws c d} ‚Üí (generated' X) ‚â§ S, by
    { rintro S hS, rintro c d _ ‚ü®w,h,rfl‚ü©, simp only, apply contains_generated' X S hS w h,},
    apply @le_Inf _ _ { S : subgroupoid G | ‚àÄ (c d : C), X c d ‚äÜ S.arrws c d } (generated' X) this, }
end

def generated_on [decidable_eq C] (D : set C) : subgroupoid G := generated (Œª c d, (X c d) ‚à™ (if h : c = d then by { rw h, exact {ùüô d} } else ‚àÖ))


end subgroupoid


section strict_hom
/--
Higgins has his own version of normality and morphisms,  
where normality has a condition that all arrows between distinct vertices disappear, 
but I'm not sure this is the right way to look at it. 
We'll do it here, and try for a more general approach afterwards (where we don't have this added condition on normal subgroupoids, _and_ morphisms can play with vertices)
-/


variables {C} (G H : groupoid C) 



/- Following ‚ÄúPresentations of groupoids‚Äù by Higgins, p. 9, we call `strict_hom` the functors on underlying category being the identity on objects -/
structure strict_hom := 
( f   : Œ† {c d : C}, G.hom c d ‚Üí H.hom c d) 
( one : Œ† (c : C), f (ùüô c) = ùüô c )
( mul : Œ† {c d e : C} (p : G.hom c d) (q : G.hom d e), f (p ‚â´ q) = (f p) ‚â´ (f q ))
( inv : Œ† {c d : C} (p : G.hom c d), f (G.inv p) = (H.inv $ f p) )

infixr ` ‚Üí** `:25 := strict_hom

def strict_im (œÜ : G ‚Üí** H) : subgroupoid H := 
‚ü® Œª c d, {p : H.hom c d | ‚àÉ q : G.hom c d, p = œÜ.f q}
, by {rintros c d _ ‚ü®q,rfl‚ü©, rw ‚Üê œÜ.inv, simp only [mem_set_of_eq, exists_apply_eq_apply'],}
, by {rintros c d e _ ‚ü®p,rfl‚ü© _ ‚ü®q,rfl‚ü©, rw ‚Üê œÜ.mul, simp only [mem_set_of_eq, exists_apply_eq_apply'],}‚ü© 


variables {G H}

def strict_ker [decidable_eq C] (œÜ : G ‚Üí** H) : subgroupoid G := 
‚ü® Œª c d, if h : c = d then eq.rec_on h {f : c ‚ü∂ c | œÜ.f f = ùüô c} else ‚àÖ
, by 
  { rintros c d p hp, 
    by_cases h : d = c, 
    { subst_vars, rw dif_pos (eq.refl d) at hp ‚ä¢, simp only [mem_set_of_eq] at hp ‚ä¢, rw œÜ.inv, rw hp, exact inv_one, },
    { rw dif_neg (Œª l : c = d, h l.symm) at hp, finish, }}
, by 
  { rintros c d e p hp q hq, 
    by_cases h : d = c,
    { by_cases k : e = d,
      { subst_vars, rw dif_pos (eq.refl e) at hp hq ‚ä¢, simp only [mem_set_of_eq] at hp hq ‚ä¢, rw œÜ.mul, rw [hp,hq], exact mul_one (ùüô e),},
      { subst_vars, rw dif_neg (Œª l : d = e, k l.symm) at hq, finish,} },
    { rw dif_neg (Œª l : c = d, h l.symm) at hp, finish, }}
‚ü©


--lemma normal_iff [decidable_eq C] (S : subgroupoid G) : is_strict_normal G S ‚Üî ‚àÉ (H : groupoid C) (œÜ : G ‚Üí** H), S = strict_ker œÜ := sorry


end strict_hom


section hom

variables (C) (D : Type*)
variables [G : groupoid C] [H : groupoid D]
variable [decidable_eq D]

def hom := @category_theory.functor C G.to_category D H.to_category
local infix `‚•§i`:50 := hom

@[simp]
lemma functor.map_inv (œÜ : C ‚•§i D) {c d : C} (f : c ‚ü∂ d) :  
  œÜ.map (G.inv f) = H.inv (œÜ.map f) := 
calc œÜ.map (G.inv f) = (œÜ.map $ G.inv f) ‚â´ (ùüô $ œÜ.obj c) : by rw [category.comp_id]
                 ... = (œÜ.map $ G.inv f) ‚â´ ((œÜ.map f) ‚â´ (H.inv $ œÜ.map f)) : by rw [comp_inv]
                 ... = ((œÜ.map $ G.inv f) ‚â´ (œÜ.map f)) ‚â´ (H.inv $ œÜ.map f) : by rw [category.assoc]
                 ... = (œÜ.map $ G.inv f ‚â´ f) ‚â´ (H.inv $ œÜ.map f) : by rw [functor.map_comp']
                 ... = (H.inv $ œÜ.map f) : by rw [inv_comp,functor.map_id,category.id_comp]            

def subgroupoid.map (œÜ : C ‚•§i D) (œÜi : function.injective œÜ.obj) (S : subgroupoid G) : subgroupoid H :=
begin
  classical,
  fsplit,
  { rintros c d,
    by_cases h : (‚àÉ a, œÜ.obj a = c) ‚àß (‚àÉ b, œÜ.obj b = d),
    { let a := h.left.some,
      let ac := h.left.some_spec,
      let b := h.right.some,
      let bd := h.right.some_spec,
      let := set.range (œÜ.map : (a ‚ü∂ b) ‚Üí ((œÜ.obj a) ‚ü∂ (œÜ.obj b))),
      rw [ac,bd] at this, exact this, },
    { exact ‚àÖ, }, }, 
  { rintro c d p hp,
    by_cases h : (‚àÉ a, œÜ.obj a = c) ‚àß (‚àÉ b, œÜ.obj b = d),
    { simp only at hp, 
      rw dif_pos h at hp, 
      simp only [eq_mp_eq_cast, cast_cast] at hp, 
      simp only [eq_mp_eq_cast, cast_cast], 
      rw dif_pos (and.intro h.right h.left), 
      sorry, },
    { simp only at hp, rw dif_neg h at hp, exact hp.elim,},},
  { sorry, }
end

def subgroupoid.comap {C D : Type*} [G : groupoid C] [H : groupoid D] (œÜ : C ‚•§i D) (S : subgroupoid H) : subgroupoid G :=
‚ü® Œª c d, {f : c ‚ü∂ d | œÜ.map f ‚àà S.arrws (œÜ.obj c) (œÜ.obj d)}
, by 
  { rintros, simp only [mem_set_of_eq], rw functor.map_inv, apply S.inv', assumption, }
, by
  { rintros, simp only [mem_set_of_eq, functor.map_comp], apply S.mul'; assumption, }‚ü©

lemma subgroupoid.comap_mono {C D : Type*} [G : groupoid C] [H : groupoid D] (œÜ : C ‚•§i D) (S T : subgroupoid H) : 
  S ‚â§ T ‚Üí subgroupoid.comap œÜ S ‚â§ subgroupoid.comap œÜ T :=
begin
  rintro ST,
  dsimp only [subgroupoid.comap], 
  rintro c d p hp,
  exact ST hp, 
end

lemma is_normal.preimage [G: groupoid C] (œÜ : C ‚•§i D) {S : subgroupoid H} (Sn : is_normal S) : is_normal (subgroupoid.comap œÜ S) :=
begin
  dsimp only [subgroupoid.comap],
  split,
  { rintro c, simp only [mem_set_of_eq, functor.map_id], apply Sn.wide, },
  { rintros c d f Œ≥ hŒ≥, simp only [mem_set_of_eq, functor.map_comp, functor.map_inv], apply Sn.conj_mem, exact hŒ≥, },
end

def ker [G : groupoid C] [H : groupoid D] (œÜ : C ‚•§i D) : subgroupoid G := subgroupoid.comap œÜ (discrete) 

def mem_ker_iff  [G : groupoid C] [H : groupoid D] (œÜ : C ‚•§i D) {c d : C} (f : c ‚ü∂ d) : 
  f ‚àà (ker C D œÜ).arrws c d ‚Üî ‚àÉ (h : œÜ.obj c = œÜ.obj d), œÜ.map f = h.rec_on (ùüô $ œÜ.obj c) :=
begin
  dsimp only [ker, discrete,subgroupoid.comap], 
  by_cases h : œÜ.obj c = œÜ.obj d,
  { simp only [dif_pos h, mem_singleton_iff, mem_set_of_eq], 
    split,
    { rintro e, use h, exact e, },
    { rintro ‚ü®_,e‚ü©, exact e, }},
  { simp only [dif_neg h, mem_empty_eq, set_of_false, false_iff, not_exists], 
    rintro e, exact (h e).elim, },
end

end hom


section quotient

def quot_v [G : groupoid C] (S : subgroupoid G) (Sn : is_normal S) := 
  (quot (Œª (c d : C), (S.arrws c d).nonempty))


def quot_v.mk [G : groupoid C] (S : subgroupoid G) (Sn : is_normal S) (c : C) : quot_v S Sn:= 
  (quot.mk (Œª (c d : C), (S.arrws c d).nonempty) c)


def conj  [G : groupoid C] (S : subgroupoid G) (Sn : is_normal S) : 
  (Œ£ (a b : C), a ‚ü∂ b) ‚Üí (Œ£ (a b : C), a ‚ü∂ b) ‚Üí Prop := 
begin
  rintros ‚ü®a,b,f‚ü© ‚ü®c,d,g‚ü©,
  exact ‚àÉ (Œ± ‚àà S.arrws a c) (Œ≤ ‚àà S.arrws d b), f = Œ± ‚â´ g ‚â´ Œ≤
end

@[refl]
lemma conj.refl [G : groupoid C] (S : subgroupoid G) (Sn : is_normal S) : ‚àÄ F, conj S Sn F F :=
begin
  rintro ‚ü®a,b,f‚ü©,
  use [(ùüô a), Sn.wide a, (ùüô b), Sn.wide b], 
  simp only [category.comp_id, category.id_comp],
end

@[symm]
lemma conj.symm [G : groupoid C] (S : subgroupoid G) (Sn : is_normal S) : ‚àÄ F G, conj S Sn F G ‚Üí conj S Sn G F :=
begin
  rintros ‚ü®a,b,f‚ü© ‚ü®c,d,g‚ü© ‚ü®Œ±,hŒ±,Œ≤,hŒ≤,rfl‚ü©,
  use [G.inv Œ±, S.inv' hŒ±, G.inv Œ≤, S.inv' hŒ≤],
  simp only [category.assoc, comp_inv, category.comp_id], 
  rw ‚Üêcategory.assoc, 
  simp only [inv_comp, category.id_comp],
end

@[trans]
lemma conj.trans [G : groupoid C] (S : subgroupoid G) (Sn : is_normal S) : 
  ‚àÄ F G H, conj S Sn F G ‚Üí conj S Sn G H ‚Üí conj S Sn F H :=
begin
  rintros ‚ü®a‚ÇÄ,b‚ÇÄ,f‚ÇÄ‚ü© ‚ü®a‚ÇÅ,b‚ÇÅ,f‚ÇÅ‚ü© ‚ü®a‚ÇÇ,b‚ÇÇ,f‚ÇÇ‚ü© ‚ü®Œ±‚ÇÄ,hŒ±‚ÇÄ,Œ≤‚ÇÄ,hŒ≤‚ÇÄ,rfl‚ü©  ‚ü®Œ±‚ÇÅ,hŒ±‚ÇÅ,Œ≤‚ÇÅ,hŒ≤‚ÇÅ,rfl‚ü©,
  use [Œ±‚ÇÄ ‚â´ Œ±‚ÇÅ, S.mul' hŒ±‚ÇÄ hŒ±‚ÇÅ, Œ≤‚ÇÅ ‚â´ Œ≤‚ÇÄ, S.mul' hŒ≤‚ÇÅ hŒ≤‚ÇÄ],
  simp only [category.assoc],
end

def quot_start [G : groupoid C] (S : subgroupoid G) (Sn : is_normal S) : (quot $ conj S Sn) ‚Üí (quot_v S Sn) :=
begin
  refine quot.lift _ _,
  { rintro ‚ü®a,b,f‚ü©, apply quot_v.mk, exact a,},
  { rintro ‚ü®a‚ÇÄ,b‚ÇÄ,f‚ÇÄ‚ü© ‚ü®a‚ÇÅ,b‚ÇÅ,f‚ÇÅ‚ü© ‚ü®Œ±,hŒ±,Œ≤,hŒ≤,rfl‚ü©,simp,dsimp [quot_v.mk], apply quot.sound, exact ‚ü®Œ±,hŒ±‚ü©,}
end

def quot_end [G : groupoid C] (S : subgroupoid G) (Sn : is_normal S) : (quot $ conj S Sn) ‚Üí (quot_v S Sn) :=
begin
  refine quot.lift _ _,
  { rintro ‚ü®a,b,f‚ü©, apply quot_v.mk, exact b,},
  { rintro ‚ü®a‚ÇÄ,b‚ÇÄ,f‚ÇÄ‚ü© ‚ü®a‚ÇÅ,b‚ÇÅ,f‚ÇÅ‚ü© ‚ü®Œ±,hŒ±,Œ≤,hŒ≤,rfl‚ü©,simp,dsimp [quot_v.mk], apply quot.sound, exact ‚ü®G.inv Œ≤,S.inv' hŒ≤‚ü©,}
end

@[instance]
def quotient_quiver [G : groupoid C] (S : subgroupoid G) (Sn : is_normal S) : 
  quiver (quot_v S Sn) := ‚ü®Œªc d, { F | quot_start S Sn F = c ‚àß quot_end S Sn F = d }‚ü©

def quot_id'  [G : groupoid C] (S : subgroupoid G) (Sn : is_normal S) : Œ† (c : quot_v S Sn),  (quot $ conj S Sn) :=
begin
  apply quot.lift, rotate,
  { rintro c, 
    exact quot.mk (conj S Sn) ‚ü®c,c,ùüô c‚ü© },
  { rintros c d ‚ü®f,fS‚ü©, 
    apply quot.sound, 
    use [f,fS,G.inv f, S.inv' fS],
    simp only [category.id_comp, comp_inv], }
end

def quot_id''  [G : groupoid C] (S : subgroupoid G) (Sn : is_normal S) : Œ† (c : quot_v S Sn),  c ‚ü∂ c :=
begin
  refine Œª c, c.rec_on _ _, 
  { rintro c, dsimp only [quotient_quiver,quot_start,quot_end,quot_v.mk], 
    use quot.mk (conj S Sn) ‚ü®c,c,ùüô c‚ü©, split, simp only, simp only, },
  { rintros c d ‚ü®f,fS‚ü©, 
    simp,
    have : quot.mk (Œª (c d : C), (S.arrws c d).nonempty) c = quot.mk (Œª (c d : C), (S.arrws c d).nonempty) d, by 
    { apply quot.sound, constructor, use fS,},
    simp, sorry
    }
end

def quotient_id  [G : groupoid C] (S : subgroupoid G) (Sn : is_normal S) : Œ† (c : quot_v S Sn),  c ‚ü∂ c :=
Œª c, ‚ü® quot_id' S Sn c, by {dsimp only [quot_id',quot_start,quot_end,quot_v.mk], induction c, simp, simp,}‚ü©

def quot_comp'  [G : groupoid C] (S : subgroupoid G) (Sn : is_normal S) : Œ† (c d e : quot_v S Sn), (c ‚ü∂ d) ‚Üí (d ‚ü∂ e) ‚Üí (quot $ conj S Sn) :=
begin
  sorry
end


def quotient [G : groupoid C] (S : subgroupoid G) (Sn : is_normal S) : 
  groupoid (quot (Œª (c d : C), (S.arrws c d).nonempty)) :=
{ to_category :=
  { to_category_struct := 
    { to_quiver := quotient_quiver S Sn 
    , id := quotient_id S Sn
    , comp := sorry }
  , id_comp' := sorry
  , comp_id' := sorry
  , assoc' := sorry }
, inv := sorry
, inv_comp' := sorry
, comp_inv' := sorry }


end quotient


end groupoid
end category_theory